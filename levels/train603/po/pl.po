# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-10-24 09:01+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: One-char language identifier
#: train603.languagecode:1
#, no-wrap
msgid "E"
msgstr "P"

#. type: Title-text
#: train603/scene.txt:1
#, no-wrap
msgid "train603:Remote control #2"
msgstr ""

#. type: Resume-text
#: train603/scene.txt:2
#, no-wrap
msgid ""
"train603:Remote control a robot using an information exchange post, so it "
"will pass over the 6 blue waypoints."
msgstr ""

#. type: ScriptName-text
#: train603/scene.txt:3
#, no-wrap
msgid "train603:remote"
msgstr ""

#. type: \b; header
#: train603-help/tremote2.txt:1
#, no-wrap
msgid "Exercise"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:4
#, no-wrap
msgid ""
"Remote control a robot using an <a object|exchange>information exchange "
"post</a>, so it will pass over the 6 blue waypoints.\n"
"The main actors of this exercise are¦:"
msgstr ""

#. type: Bullet: '1)'
#: train603-help/tremote2.txt:5
#, no-wrap
msgid ""
"A <a object|botgr>wheeled grabber</a> robot without an energy cell. This is "
"the master you have to program."
msgstr ""

#. type: Bullet: '2)'
#: train603-help/tremote2.txt:6
#, no-wrap
msgid ""
"An <a object|exchange>information exchange post</a> that receives "
"information from the master and then transmits it to the slave."
msgstr ""

#. type: Bullet: '3)'
#: train603-help/tremote2.txt:7
#, no-wrap
msgid ""
"A <a object|bottr>practice bot</a> which waits for orders from the exchange "
"post. This robot has already been programmed."
msgstr ""

#. type: Image filename
#: train603-help/tremote2.txt:9
#, no-wrap
msgid "tremot2a"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:11
#, no-wrap
msgid ""
"An information exchange post stores \"name/value\" couples. To control the "
"\"slave\" robot we use two couples¦:"
msgstr ""

#. type: Bullet: '1)'
#: train603-help/tremote2.txt:12
#, no-wrap
msgid "name=\"order\", value=order number"
msgstr ""

#. type: Bullet: '2)'
#: train603-help/tremote2.txt:13
#, no-wrap
msgid "nom=\"param\", valuer=parameter  for the operation"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:17
#, no-wrap
msgid ""
"Order  #1 means \"move\" and order #2 means \"turn\". The parameter is the "
"distance to move or the turning angle. For example to make the slave move 20 "
"meters write¦:\n"
"<c/><s/>\t<a cbot|send>send</a>(\"order\",  1, 100);  // order \"move\""
msgstr ""

#. type: \s; block (usually verbatim code)
#: train603-help/tremote2.txt:18
#, no-wrap
msgid "\t<a cbot|send>send</a>(\"param\", 20, 100);  // distance 20 meters"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:22
#, no-wrap
msgid ""
"These two instruction send following 2 pieces of information to the exchange "
"post¦:\n"
"<c/>    order=1\n"
"    param=20"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:25
#, no-wrap
msgid ""
"The slave robot waits for an order and executes it. Once the order has been "
"executed by the slave, it removes the order from the exchange post. Once an "
"order has been sent, the master must wait for the slave finishing the order "
"before sending the next order. This is done by testing if the order is still "
"inside the exchange post. Just write¦:\n"
"<c/><s/>\twhile ( <a cbot|testinfo>testinfo</a>(\"order\", 100) )  // wait "
"for end of work"
msgstr ""

#. type: \s; block (usually verbatim code)
#: train603-help/tremote2.txt:28
#, no-wrap
msgid ""
"\t{\n"
"\t\twait(1);\n"
"\t}"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:31
#, no-wrap
msgid ""
"As we must give more than one order its most convenient to write a <a "
"cbot|function>function</a> <code>SendToPost</code>, that sends the order and "
"wait for its completion¦:\n"
"<c/><s/>void object::SendToPost(float order, float param)"
msgstr ""

#. type: \s; block (usually verbatim code)
#: train603-help/tremote2.txt:40
#, no-wrap
msgid ""
"{\n"
"\tsend(\"param\", param, 100);  // send the parameter\n"
"\tsend(\"order\", order, 100);  // send the order\n"
"\n"
"\twhile ( testinfo(\"order\", 100) )  // wait for end of work\n"
"\t{\n"
"\t\twait(1);\n"
"\t}\n"
"}"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:43
#, no-wrap
msgid ""
"To move forward by 20 meters, you must write in the main program¦:\n"
"<c/><s/>\tSendToPost(1, 20);  // move(20);"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:45
#, no-wrap
msgid "This is the route the robot must travel through¦:"
msgstr ""

#. type: Image filename
#: train603-help/tremote2.txt:46
#, no-wrap
msgid "tremot2b"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:48
#, no-wrap
msgid "It's up to you to finish the programming."
msgstr ""

#. type: \t; header
#: train603-help/tremote2.txt:49
#, no-wrap
msgid "See also"
msgstr ""

#. type: Plain text
#: train603-help/tremote2.txt:50
#, no-wrap
msgid ""
"<a cbot>Programming</a>, <a cbot|type>types</a> and <a "
"cbot|category>categories</a>."
msgstr ""
